apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: hello-world-service-template
  title: Hello World Service Application Template
  description: |
    This template will create a hello world service application with spring boot application.
  tags:
    - spring
    - java
spec:
  type: service
  parameters:
    - title: Application Parameters
      properties:
        appName:
          title: Application name
          type: string
          default: Hello World Service
          ui:autofocus: true
        groupId:
          title: Artifact Group Id
          type: string
          default: com.backstage.demo
          pattern: '^\w+(\.[\w\d]*)*$'
        artifactId:
          title: Artifact Id
          type: string
          default: hello-world-service
        packageName:
          title: Package name should be (com.example.application)
          type: string
          default: com.backstage.demo
          pattern: '^\w+(\.[\w\d]*)*$'
        packageNameFolder:
          title: Package name folder should be (com/example/application)
          type: string
          default: com/backstage/demo
          pattern: '^\w+(\/\w*)*$'
        apiPrefix:
          title: Api prefix
          type: string
          default: /api/v1
          pattern: '^\/\w+(\/[\w\d-]*)*$'
        serverPort:
          title: Server port
          type: number
          default: 8080
    - title: Choose a location
      properties:
        repoUrl:
          title: Enter an Owner and Repository Name
          description: |
            The Owner should be your Gitlab username. The Repository name should be a name that is not one that exists already in your Gitlab account.
          type: string
          ui:autofocus: true
          ui:field: RepoUrlPicker
          default: gitlab-local?owner=backstage-demo&repo=hello-world-service
          ui:options:
            allowedHosts:
              - gitlab-local
  steps:
    - id: fetch-skeleton
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          # Catalog Parameters
          component_id: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          description: 'Hello World Service'
          owner: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}
          repo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          repoUrl: ${{ parameters.repoUrl }}
          # Application Parameters
          appName: ${{ parameters.appName }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          packageName: ${{ parameters.packageName }}
          packageNameFolder: ${{ parameters.packageNameFolder }}
          apiPrefix: ${{ parameters.apiPrefix }}
          serverPort: ${{ parameters.serverPort }}
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts: ['gitlab-local']
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public
        defaultBranch: main
        description: Repository Created by Demo template
    - id: component
      name: Register Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog.yaml'
    - id: api
      name: Register API
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/api.yaml'
  output:
    links:
      - title: Repository
        icon: github
        url: ${{ steps.publish.output.repoContentsUrl }}
      - title: Catalog
        icon: 'kind:component'
        entityRef: ${{ steps.component.output.entityRef }}
      - title: API
        icon: 'kind:api'
        entityRef: ${{ steps.api.output.entityRef }}

