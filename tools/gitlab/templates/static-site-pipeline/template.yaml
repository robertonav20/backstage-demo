# yaml-language-server: $schema=https://json.schemastore.org/yamllint.json

apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: static-site-pipeline-template
  title: Static Site Pipeline Template
  description: |
    This template will create a simple static site app repository under owner folder/group and a related job jenkins with under the same folder.
    You will obtain button links after job execution
spec:
  type: website
  parameters:
    - title: Choose a location
      description: |
        This section will ask for details about the Owner and Repository name which will then be used
        to create a repository in that location using your GitHub credentials.
      properties:
        cicdProvider:
          title: Select CI/CD Provider
          type: string
          default: gitlab
          enum:
            - gitlab
            - jenkins
          enumNames:
            - 'Gitlab'
            - 'Jenkins'
        repoUrl:
          title: Enter an Owner and Repository Name
          description: |
            The Owner should be your GitHub username. The Repository name should be a name that is not one that exists already in your GitHub account.
          type: string
          ui:autofocus: true
          ui:field: RepoUrlPicker
          default: gitlab-local?owner=backstage-demo&repo=static-site-pipeline
          ui:options:
            allowedHosts:
              - gitlab-local
  steps:
    - id: fetch-skeleton
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ./content
        values:
          component_id: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          description: 'Static site component'
          owner: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}
          repo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          cicdProvider: ${{ parameters.cicdProvider }}
    - id: configure-cicd
      name: Configure CI-CD
      action: fs:delete
      input:
          files:
            - ${{ '.gitlab-ci.yml' if parameters.cicdProvider === 'jenkins' else 'Jenkinsfile' }}
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts: ["gitlab-local"]
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public
        defaultBranch: main
        description: Repository Created by Demo template
    - id: jenkins-job-create
      if: ${{ parameters.cicdProvider === "jenkins" }}
      name: Jenkins Job Create
      action: jenkins:job:create
      input:
        jobName: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
        jobXml: |
          <flow-definition plugin="workflow-job@1447.v559b_c710cd2e">
            <actions/>
            <description></description>
            <keepDependencies>false</keepDependencies>
            <properties>
                <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.9.4">
                    <gitLabConnection>gitlab</gitLabConnection>
                    <jobCredentialId></jobCredentialId>
                    <useAlternativeCredential>false</useAlternativeCredential>
                </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
            </properties>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@3975.v567e2a_1ffa_22">
                <scm class="hudson.plugins.git.GitSCM" plugin="git@5.6.0">
                    <configVersion>2</configVersion>
                    <userRemoteConfigs>
                        <hudson.plugins.git.UserRemoteConfig>
                            <url>${{ steps.publish.output.remoteUrl }}</url>
                            <credentialsId>gitlab-credentials</credentialsId>
                        </hudson.plugins.git.UserRemoteConfig>
                    </userRemoteConfigs>
                    <branches>
                        <hudson.plugins.git.BranchSpec>
                          <name>*/main</name>
                        </hudson.plugins.git.BranchSpec>
                    </branches>
                    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
                    <submoduleCfg class="empty-list"/>
                    <extensions/>
                </scm>
                <scriptPath>Jenkinsfile</scriptPath>
                <lightweight>true</lightweight>
            </definition>
            <triggers/>
            <disabled>false</disabled>
          </flow-definition>
    - id: jenkins-job-build
      if: ${{ parameters.cicdProvider === "jenkins" }}
      name: Jenkins Job Build
      action: jenkins:job:build
      input:
        jobName: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
    - id: register
      name: Register Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog.yaml"
  output:
    links:
      - url: ${{ steps.publish.output.repoContentsUrl }}
        title: "Gitlab Repository"
      - url: http://jenkins-local:8080/job/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/job/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
        title: "Jenkins Job"

